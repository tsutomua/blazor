@page "/listdetail"

@using NetLearner.SharedLib.Data
@using NetLearner.SharedLib.Models
@using NetLearner.SharedLib.Services
@inject IResourceListService service
@inject IJSRuntime jsRuntime


<div class="modal" tabindex="-1" role="dialog" id="taskModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                <AuthorizeView>
                    <Authorized Context="Auth">
                        <EditForm Model="@ResourceListObject" OnValidSubmit="@HandleValidSubmit">
                            <div class="form-group">
                                <label for="itemName">Resource List: </label>
                                <input type="hidden" @bind-value="@ResourceListObject.Id" />
                                <InputText id="itemName" class="form-control" @bind-Value="@ResourceListObject.Name" />
                            </div>
                            <button type="submit" class="btn btn-primary">Submit</button>
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        </EditForm>
                    </Authorized>
                    <NotAuthorized>
                        <div class="form-group">
                            Resource List: 
                            @ResourceListObject.Name
                        </div>
                        <div>
                            (Read Only)
                        </div>
                    </NotAuthorized>
                    <Authorizing>
                        <p>Please wait...</p>
                    </Authorizing>
                </AuthorizeView>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ResourceList ResourceListObject { get; set; }

    [Parameter]
    public Action DataChanged { get; set; }

    [Parameter]
    public RenderFragment CustomHeader { get; set; }

    private async Task CloseTaskModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "taskModal");
    }

    private async void HandleValidSubmit()
    {
        if (ResourceListObject.Id == 0)
        {
            await service.Add(ResourceListObject);
        }
        else
        {
            
            await service.Update(ResourceListObject);
        }
        await CloseTaskModal();
        DataChanged?.Invoke();
    }
}