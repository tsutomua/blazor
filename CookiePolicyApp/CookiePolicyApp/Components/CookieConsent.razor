@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Http
@using System.Text.Json;
@implements IAsyncDisposable
@inject IHttpContextAccessor Http
@inject IJSRuntime JS
@* @rendermode InteractiveServer *@
@inject PersistentComponentState ApplicationState

<style>

    .alert-dismissible .close {
        position: absolute;
        top: 0;
        right: 0;
        padding: .75rem 1.25rem;
        color: inherit;
    }

    button.close {
        padding: 0;
        background-color: transparent;
        border: 0;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
    }

    .close {
        float: right;
        font-size: 1.5rem;
        font-weight: 700;
        line-height: 1;
        color: #000;
        text-shadow: 0 1px 0 #fff;
        opacity: .5;
    }


</style>

@if (showBanner)
{
    @* Do not remove the span tag as it causes an error described in https://stackoverflow.com/questions/60183421/blazor-typeerror-cannot-read-property-removechild-of-null-at-object-e-as-rem  *@
    <span>
        <div id="cookieConsent" class="alert alert-info alert-dismissible fade show" 
        role="alert">
            Use this space to summarize your privacy and cookie use policy.
            <a href="/privacy">Privacy Policy</a>
            <button type="button" @onclick="AcceptPolicy" class="accept-policy close" 
                data-bs-dismiss="alert" aria-label="Close"
            data-cookie-string="@cookieString">
                Accept
            </button>
        </div>
     </span>
}
@code {
    private IJSObjectReference? module;
    private ITrackingConsentFeature? consentFeature;
    private bool showBanner;
    private string? cookieString;
    private bool isSecondPass;
    // private string? myDataVariable; Variable to hold your data

    protected override async Task OnInitializedAsync()
    {
        if (ApplicationState.TryTakeFromJson("IsSecondPass", out string? restoredIsSecondPass)) // Replace with your data type and key
        {
            if (bool.TryParse(restoredIsSecondPass, out isSecondPass))
            {
                if (ApplicationState.TryTakeFromJson("showBanner", out string? restoredShowBanner))
                {
                    showBanner = bool.Parse(restoredShowBanner);
                }
                else
                {
                    showBanner = true; // Default to true if not found
                }

                if (ApplicationState.TryTakeFromJson("cookieString", out string? restoredCookieString))
                {
                    cookieString = restoredCookieString;
                }
                else
                {
                    cookieString = null; // Default to null if not found
                }

                if (ApplicationState.TryTakeFromJson("module", out string? restoredModule))
                {
                    module = JsonSerializer.Deserialize<IJSObjectReference>(restoredModule);
                }
                else
                {
                    module = null; // Default to null if not found
                }
            }
        }
        else
        {
            // Get values in the first pass.
            consentFeature = Http.HttpContext?.Features.Get<ITrackingConsentFeature>();
            showBanner = !consentFeature?.CanTrack ?? false;
            cookieString = consentFeature?.CreateConsentCookie();

            ApplicationState.RegisterOnPersisting(PersistData);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./Components/CookieConsent.razor.js");
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson("IsSecondPass", "True"); // Replace with your data and key
        ApplicationState.PersistAsJson("showBanner", showBanner.ToString()); // Persist the data variable
        ApplicationState.PersistAsJson("cookieString", cookieString); // Persist the cookie string

        // May not be needed.
        ApplicationState.PersistAsJson("module", JsonSerializer.Serialize(module)); // Persist the data variable

        return Task.CompletedTask;
    }

    private async Task AcceptPolicy()
    {
        if (module is not null)
        {
            await module.InvokeVoidAsync("acceptPolicy", cookieString);
            showBanner = false;
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        // If uncommented, the error below will occur when the accept button is pressed.
        // System.InvalidOperationException: TypeError: Cannot read properties of null (reading 'removeChild') at Microsoft.AspNetCore.Components.RenderTree.Renderer.InvokeRenderCompletedCallsAfterUpdateDisplayTask(Task updateDisplayTask, Int32[] updatedComponents)
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}
