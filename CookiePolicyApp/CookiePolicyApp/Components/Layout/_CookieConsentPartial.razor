@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Http
@implements IAsyncDisposable
@inject IHttpContextAccessor Http
@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authorization;

@inject IHttpContextAccessor hca
@inject IJSRuntime JSRuntime

@rendermode InteractiveServer
<style>

    .alert-dismissible .close {
    position: absolute;
    top: 0;
    right: 0;
    padding: .75rem 1.25rem;
    color: inherit;
    }

    button.close {
    padding: 0;
    background-color: transparent;
    border: 0;
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    }

    .close {
    float: right;
    font-size: 1.5rem;
    font-weight: 700;
    line-height: 1;
    color: #000;
    text-shadow: 0 1px 0 #fff;
    opacity: .5;
    }


</style>
@if (showBanner)
{
        <div id="cookieConsent" class="alert alert-info alert-dismissible fade show" role="alert">
            NetLearner uses cookies and requires your consent.
            <button type="button" class="accept-policy close" data-dismiss="alert" aria-label="Close" data-cookie-string="@cookieString" @onclick="AcceptMessage">
                <span aria-hidden="true">Accept</span>
            </button>
        </div>
}

    @code {
    private IJSObjectReference? module;
    ITrackingConsentFeature consentFeature;
    bool showBanner;
    string cookieString;

    protected override void OnInitialized()
    {
        consentFeature = Http.HttpContext?.Features.Get<ITrackingConsentFeature>();
        showBanner = !consentFeature?.CanTrack ?? false;
        cookieString = consentFeature?.CreateConsentCookie();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import",
                "./netLearnerJsInterop.js");
        }
    }

    private void AcceptMessage()
    {
        if (module is not null)
        {
            JSRuntime.InvokeVoidAsync(
                "netLearnerJsFunctions.acceptMessage",
                cookieString);
            
            // Hide the message after accepted.
            JSRuntime.InvokeVoidAsync(
                "netLearnerJsFunctions.hideMessage",
                cookieString);

            showBanner = false;
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    
    }
}
